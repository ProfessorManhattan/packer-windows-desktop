{
  "name": "@megabytelabs/packer-windows-desktop",
  "version": "1.0.0",
  "description": "A Windows 10 Enterprise (Insider's Preview) Packer project that enables both WinRM and SSH",
  "license": "MIT",
  "author": "Brian Zalewski <brian@megabyte.space> (https://megabyte.space)",
  "homepage": "https://megabyte.space",
  "repository": {
    "type": "git",
    "url": "git+https://gitlab.com/megabyte-labs/packer/windows-desktop.git"
  },
  "bugs": {
    "email": "help@megabyte.space",
    "url": "https://gitlab.com/megabyte-labs/packer/windows-desktop/-/issues"
  },
  "scripts": {
  },
  "config": {
    "commitizen": {
      "path": "cz-conventional-changelog"
    }
  },
  "devDependencies": {
  },
  "keywords": [
    "accelerated",
    "compressed",
    "desktop",
    "optimized",
    "packer",
    "windows-desktop",
    "workstation"
  ],
  "engines": {
    "node": ">=10"
  },
  "funding": [
    {
      "type": "opencollective",
      "url": "https://opencollective.com/megabytelabs"
    },
    {
      "type": "patreon",
      "url": "https://www.patreon.com/ProfessorManhattan"
    }
  ],
  "lint-staged": {
    "*.{json}": [
      "prettier --write"
    ],
    "scripts/*.custom.sh": [
      "prettier --write"
    ],
    "package.json": [
      "prettier-package-json --write"
    ]
  },
  "blueprint": {
    "description": "An automated Windows 11 Desktop Packer project that sets up SSH, WinRM, and virtualization additions",
  "description_template": "Windows MAJOR_VERSION Enterprise (Insider's Preview)",
  "description_template_package": "A Windows MAJOR_VERSION Enterprise (Insider's Preview) Packer project that enables both WinRM and SSH",
  "hostname": "vagrant-windows",
  "group": "packer",
  "name": "Windows 11 Desktop",
  "repository": {
    "github": "https://github.com/megabyte-labs/packer-windows-desktop",
    "gitlab": "https://gitlab.com/megabyte-labs/packer/windows-desktop"
  },
  "subgroup": "desktop",
  "title": "Windows 11 Desktop Template for Packer",
  "overview": "This project houses configurations that can be used to build performant [Windows 11](https://www.microsoft.com/en-us/windows/windows-11) desktop images. It downloads an Insider's Preview image as a base, uses Packer to automate the build process, and then sets the image up using some [Windows Bento scripts](https://github.com/chef/bento/tree/main/packer_templates/windows) which take care of optimizing the image for your system (i.e. setting up SSH with the Vagrant default public key, setting up GuestAdditions for VirtualBox, etc.). This project is intended to be used to create desktop images that you would launch from your main desktop using a GUI. If you are looking for headless images, you should either use [Bento's server images](https://app.vagrantup.com/bento). You might also have some luck browsing through our [Packer projects](https://gitlab.com/megabyte-labs/packer).",
  "slug": "windows-desktop",
  "vagrant_tag": "windows",
  "version_description": "Windows 11 Enterprise (Insider's Preview) ISO_VERSION. Includes WinRM, SSH, Python 3, and Chocolatey. Perfect for Ansible testing. Bloat removed. See https://github.com/megabyte-labs/packer-windows-desktop for more details."
  },
  "prettier": "@megabytelabs/prettier-config",
  "scripts-info": {
    "build": "Build all of the images",
    "build:hyperv": "Build a Hyper-V image",
    "build:kvm": "Build a QEMU/KVM image",
    "build:parallels": "Build a Parallels image",
    "build:virtualbox": "Build a VirtualBox image",
    "build:vmware": "Build a VMWare image",
    "commit": "The preferred way of running git commit (instead of git commit, we prefer running 'npm run commit')",
    "fix": "Automatically fix formatting errors",
    "info": "Logs descriptions of all the npm tasks",
    "launch": "Runs 'vagrant up' to automatically spin up the VM",
    "misc:markdown-links": "Checks markdown files for broken links",
    "prepare-release": "Updates the CHANGELOG with commits made using 'npm run commit' and updates the project to be ready for release",
    "test": "Validates the Packer configuration file (i.e. template.json) and performs some other linting",
    "update": "Runs .start.sh to automatically update meta files and documentation",
    "version": "Used by 'npm run prepare-release' to update the CHANGELOG and app version"
  },
  "standard-version": {
    "scripts": {
      "prebump": "jq -r '.variables.iso_version' template.json",
      "prerelease": "git add --all",
      "pretag": "PACKAGE_VERSION=$(cat package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[\",]//g' | tr -d '[[:space:]]') && if git show-ref --tags v$PACKAGE_VERSION --quiet; then git tag -d v$PACKAGE_VERSION; fi"
    }
  }
}
